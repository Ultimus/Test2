
package TowerAlpha;

import java.awt.Font;
import java.util.LinkedList;

public class GameBeta {
	
	static final int WIDTH = 1024; // 1280x720 
	static final int HEIGHT = 720; // 1024x720

	public static 			LinkedList<Enemy> enemies;
	public static 			LinkedList<Tower> towers;
	public static 			LinkedList<CanonBall> balls;
	
	static int 				pathsize = 20; // Laenge des Weges
	public static			Path[] path = new Path[pathsize];
	public static  boolean running = true;
	
	public static int 		lifes = 10;
	public static int 		gold = 600;
	
	// falls KanonenTurm gebaut wird diese Variable wahr und die Methode PositionTower aktiv
	public static boolean buildCanon; 
	public static boolean buildRum;
	public static boolean buildMill;
	
	public static int canonRadius = 200;
	public static int rumCanonRadius = 180;
	public static int millRadius = 170;

	
	
	public static int canonSizeX = 40;
	
	public static int rumSize= 50;
	
	
	public static int	canonButtonX =	WIDTH-180;
	public static int	canonButtonY = HEIGHT -40;
	
	public static int rumButtonX = WIDTH -120;
	
	public static int millButtonX = WIDTH - 60;
	
	//RichtWert fuer neue Schiffe auf welcher Hoehe sie erscheinen sollen
	public static int startY = 510;					
	public static int waveCounter = 0;
	
	// Hinweis oder Warnmeldungen fuer den Spieler
	public static String message = "";
	
	public static String playername = "";
	public static int score = 0;
	
	// sounds on or off?
	public static boolean sounds = true;
	public static boolean start = false;
	public static boolean pause = false;

	
	// MAIN
	public static void main(String[] args){
		
		enemies = new LinkedList<Enemy>();
		towers = new LinkedList<Tower>();
		balls = new LinkedList<CanonBall>();
		
		
		mapOne(); // erstellt ein Array des Weges		
		
		setWindow();
		

		while(lifes > -10) { 
		   //Game Loop
			
		   if(lifes > 0){
 
		   
			//sortEnemy();
   			wave();
   			enemyDirection();
   			enemyMove();
   			checkHP();
   			stillslowed();
   			stillstunned();
   			
   			watchMouse();
   			
   			StdDraw.clear(StdDraw.MM_SEABLUE);
   			StdDraw.picture(WIDTH/2+125, HEIGHT/2, "background5.png");
   			
   			setWay(path);
   		
   			StdDraw.picture(WIDTH-107, 357, "SchadelHinten.png");
   			
   			drawShip();
   			
   			StdDraw.picture(WIDTH-54,375, "SchadelVorne.png");
   			
   			drawTowers();
   			drawLifes();
   			shoot();
   			drawBalls();
   			drawInterface();
   			
   			mouseSetCanon();
   			mouseSetRum();
   			mouseSetRMill();
   			keyCheck();
			while(start==false){
		   			watchMouse();
		   			StdDraw.clear(StdDraw.MM_SEABLUE);
		   			StdDraw.picture(WIDTH/2+125, HEIGHT/2, "background5.png");
		   			
		   			setWay(path);
		   		
		   			StdDraw.picture(WIDTH-107, 357, "SchadelHinten.png");
		   			
		   			drawShip();
		   			
		   			StdDraw.picture(WIDTH-54,375, "SchadelVorne.png");
		   			
				 	drawTowers();
				 	drawLifes();
				 	drawInterface();
				 	mouseSetCanon();
				 	mouseSetRum();
		   			mouseSetRMill();
		   	   		keyCheck();
		   	   		StdDraw.show(10);
		   	   		}
			while(pause==true){
					keyCheck();
			}
 
		   } else {
		      
			   gameover();
			   
			}

			StdDraw.show(10); // refresh time
			
		}//Gane Loop ende
		
      //if(1 == HighScore.upload(playername, score)){
         //System.out.println("Error whilst uploading highscore!");
      //}
      //MainMenu.drawHighscore();
		//String[] args2 = {};
		//MainMenu.main(args2);
		System.exit(0);
		
	}
	
	// displays the message centered at top in red letters
	public static void showMessage(){
	   
	  StdDraw.setPenColor(StdDraw.RED);
	  StdDraw.setFont(new Font("Arial", Font.PLAIN, 20));
	  StdDraw.text(WIDTH/2, HEIGHT-HEIGHT/8, message);
	  StdDraw.setPenColor();
	  StdDraw.setFont();
				   
	}
	
	public static void wave(){
		
		if(waveCounter >= 300){						//Gibt alle 300 Perioden zufaellig einen oder zwei Gegner aus
			int randomCounter;
			randomCounter = (int)(3*Math.random());
			
			Schiff ship1;
			Floss floss1;
			
			ship1 = new Schiff(-100,startY); // zufaellig Schiff oder Floss waehlen
			floss1 = new Floss(-230, startY+30);
			
			
			if(randomCounter == 0){
				enemies.add(ship1);
				enemies.add(floss1);		
			
			}else{
			
				if(randomCounter ==1)enemies.add(ship1);
				else enemies.add(floss1);
			}
			waveCounter = 0;
		}else{
			waveCounter++;
		}
		
	}
	
	public static void enemyDirection(){			//uebergebe eine GegnerListe die die Richtung der enthaltenden Gegner ermittelt
		
		Enemy compareE; 
		
		for(int k = 0; k< enemies.size(); k++){ //als erstes Werden die Gegner durchgezaehlt
			for(int i = path.length-1; i>=0; i--){//und dannach ueberprueft wie sie zu laufen haben. Rueckwaerts um zu fruehe Kurven zu vermeiden
			
				compareE = (Enemy)enemies.get(k);
				
				if(Math.abs(compareE.getX()-path[i].getX())<=path[i].getSize() &&
						Math.abs(compareE.getY()-path[i].getY())<= path[i].getSize()){
					
					compareE.setDirection(path[i].getDirection());
					enemies.add(k, compareE);
					enemies.remove(k+1);
				
				}//if
			}//for
		}//for enemy
	}//enemy Direction
	
	
	
	
	
									
	public static void enemyMove(){								//Methode die die Koordinaten der Gegner in der Enemy Liste bestimmt
		
		Enemy compareE; 
		
		for(int k = 0; k < enemies.size(); k ++){
			
			compareE = (Enemy)enemies.get(k);
			double xPos =	compareE.getX();
			double yPos = compareE.getY();
			
			
			if(compareE.getDirection() == 0){
				compareE.setPos(xPos,yPos+compareE.getSpeed());
			}//nach Oben
			
			if(compareE.getDirection() == 1){
				compareE.setPos(xPos+compareE.getSpeed(),yPos);
			}//nach rechts
			
			if(compareE.getDirection() == 2){
				compareE.setPos(xPos,yPos-compareE.getSpeed());

			}//nach unten
		
			if(compareE.getDirection() == 3){
				compareE.setPos(xPos-compareE.getSpeed(),yPos);
			}//nach links
			enemies.add(k, compareE);
			enemies.remove(k+1);
			
		}
		
	}
	
	
	
	   public static void setWindow() {
		      
         if(MainMenu.game_launched == false) {
		      StdDraw.setCanvasSize(WIDTH, HEIGHT);
		      StdDraw.setXscale(0, WIDTH);
		      StdDraw.setYscale(0, HEIGHT);
         }
         
	      StdDraw.setPenColor(StdDraw.BLACK);
         StdDraw.setFont(new Font("Arial", Font.PLAIN, 20));

	   }
	  
	   
	 public static void setWay(Path[] pathParArray) {			//�bergebe einen Weg Array der gezeichnet wird
		      
		   // Way: 4 weil alles < 4 noch im Meer ist und das Bild weg.png Sand mit drin hat, sieht einfach bloed aus :D
		   for(int i = 0; i < pathParArray.length; i++){
			 if(pathParArray[i].getImage()==1)  StdDraw.picture(pathParArray[i].getX(), pathParArray[i].y, "WegH.png");
			 if(pathParArray[i].getImage()==2) StdDraw.picture(pathParArray[i].getX(), pathParArray[i].y, "WegV.png");
			 if(pathParArray[i].getImage()==3) StdDraw.picture(pathParArray[i].getX(), pathParArray[i].y, "WegKurveLO.png");
			 if(pathParArray[i].getImage()==4) StdDraw.picture(pathParArray[i].getX(), pathParArray[i].y, "WegKurveOR.png");
			 if(pathParArray[i].getImage()==5) StdDraw.picture(pathParArray[i].getX(), pathParArray[i].y, "WegKurveUR.png");
			 if(pathParArray[i].getImage()==6) StdDraw.picture(pathParArray[i].getX(), pathParArray[i].y, "WegKurveLU.png");
		   }
	}
	 
	 
	 public static void drawLifes(){		//Lebensz�hler und Gold zeichnen
		 
		 String tempLifes = Integer.toString(lifes);
		 StdDraw.picture(100, 90, "Rolle4.png");
		 Font temp = new Font("SansSerif", Font.BOLD, 25);
		 StdDraw.setFont(temp);
		 StdDraw.picture(60, 110, "Herz.png");
		 StdDraw.text(100, 110, tempLifes);
		 StdDraw.picture(60, 70, "Muenze.png");
		 String tempGold = Integer.toString(gold);
		 StdDraw.text(100, 70, tempGold);
		 StdDraw.setFont();
		  
	 }
	 
	 
	 public static void drawShip(){			//�bergebe eine Liste an Gegnern die an der aktuellen Position gemalt werden
		 
		 Enemy compareE;					//Tempor�rer Gegner zum Vergleich der Koordinaten
		 String hpString;
		 for(int i = 0; i < enemies.size(); i++){
			 
			 compareE = (Enemy)enemies.get(i); 
			 
			 // Floss oder Schiff
			 if(compareE.getType() == 1){
				StdDraw.picture(compareE.x + 5, compareE.y, "testschiff1schatten.png");
			    StdDraw.picture(compareE.x, compareE.y, "testschiff1.png");
			 }
			 else{
				StdDraw.picture(compareE.x + 25, compareE.y, "FlossSchatten.png");
			    StdDraw.picture(compareE.x, compareE.y, "Floss2.png");
			 }
			 hpString = ""+compareE.getHP();
			 StdDraw.text(compareE.getX(), compareE.getY(),  hpString);
			 
			 
			 
			 HandleDot(compareE);			// Da hier alle Gegner durchgelaufen werden wird hier die HandleDot Methode jede Runde durchgelaufen
			 
		 }
	 }
	 
    
   // zeichnet Kanonenkugeln
   public static void drawBalls() {
                  
      Tower tower;
      Enemy ship;
      CanonBall ball;
      boolean hit = true;  // edited by Max: 30.6.11
      double evade = Math.random() * 2;// edited by Max: 30.6.11
      
      
      
      // alle Kanonenkugeln durchlaufen
      for(int i = 0; i < balls.size(); i++) {

         ball = balls.get(i);
         
         try {   
            
            ship = enemies.get(ball.getEnemy());
            tower = towers.get(ball.getTower());
            
            if (ship.getType() == 1){//Abfrage ob Schiff ausweicht
          	  if (evade <= 0){		
          		  hit = false;		
          	  }						
            }						
   
            // loescht Kanonenkugeln die nicht mehr sichtbar sind und falsch fliegen
            if(ship.getX() == ball.getX() && ship.getY() == ball.getY() || ball.getX() > WIDTH || ball.getX() < 0 || ball.getY() > HEIGHT || ball.getY() < 0)
               balls.remove(i);
            
            //System.out.println(ball.getFactor());
            
            // Range
            double dx = Math.abs(ship.getX()-tower.getX());
            double dy = Math.abs(ship.getY()-tower.getY());
            
            // nur Kugeln berechnen, die innerhalb der Reichweite sind
            if(Math.sqrt(dx*dx + dy*dy) <= tower.getRange()) {
               
               // setzt ball koords neu
               ball.setX((int) (tower.getX()-(tower.getX()-ship.getX()) * ball.getFactor()));
               ball.setY((int) (tower.getY()-(tower.getY()-ship.getY()) * ball.getFactor()));
               
               /*if (ball.targetX == ship.x && ball.targetY == ship.y){ // falls Boot zurückschiesst
            	   ball.setX((int) (ship.getX()-(ship.getX()- tower.getX())*ball.getFactor()));
            	   ball.setY((int) (ship.getY()-(ship.getY()- tower.getY())*ball.getFactor()));
               }*/
               
               ball.setFactor(ball.getFactor() + 0.04); // set ball coords, 0.04 = speed
               
               if(ball.getFactor() > 1) {
                  
                  // zieht HP vom Schiff bei Treffer ab
                  int hp = ship.getHP();
                  
                 if (hit == true){ //trefferabfrage
                  ship.setHP(hp-tower.getDamage());
                  
                  // play hit sound
                  Sound.play("sounds/explosion.wav");
                  
                 }
                 
                 if (hit == true && tower.effect == 1){//slowed, falls RUmkanone trifft
                	 if (ship.effected == 0){
                	 ship.speed *= 0.4;
                	 ship.effected = 1;
                 	 ship.timer = System.currentTimeMillis();
                	 }else{ ship.timer = System.currentTimeMillis(); //verlängert slowtimer falls geslowter Gegner getroffen wird
                	 }
                 }
                 
                 if (hit == true && tower.effect == 2){ //stunned, falls Tower Effekt 2 hat
                	 if (ship.effected == 0|| ship.effected == 1){
                		 ship.speed *= 0;
                	 	 ship.effected = 2;
                	 ship.timer = System.currentTimeMillis();
                	 }else{ ship.timer = System.currentTimeMillis();
                 }
                 }
                 
                 if (hit == true && tower.effect == 3){//setzt dot auf true oder aktualisiert wenn dot schon wirkt
                	 if (ship.dot == false){
                		 ship.dot = true;
                		 ship.dotTimer = System.currentTimeMillis();
                	 }
                	 else if (ship.dot){
                		 ship.dotTimer = System.currentTimeMillis();
            
                 
                	 }
                 }
                  enemies.remove(ball.getEnemy());
                  enemies.add(ball.getEnemy(), ship);
                  
                  balls.remove(i); //ball.setFactor(0.0); Bug Fix: loescht Balls sobald getroffen
                  
               } else {
                  
                  
                  if(tower.getTyp() == 1) {
                     StdDraw.picture(ball.getX(), ball.getY(), "ball.png"); // zeichnet Kugel
                  }
                  if(tower.getTyp()==2){
                     StdDraw.picture(ball.getX(), ball.getY(), "Fass.png"); // zeichnet Kugel
                  }
                  
                     
                  //StdDraw.picture(ball.getX() + 5, ball.getY() + 5, "ballschatten2.png");// zeichnet Kugelschatten NOT

               }
               
            }
            
         } catch (Exception e) {
            //System.out.println("Debug 1");
         }
            
   
      }
      
   }
	 
   public static void checkHP(){								//entfernt Gegner aus der Liste falls sie abgeschossen wurden
		 Enemy compareE;
		 
		 for(int i = 0; i<enemies.size(); i++){
			 compareE = (Enemy)enemies.get(i);
			 
			 if(compareE.getHP()<=0){
				 enemies.remove(i);								//Hier kann man noch weitere Aktionen hineinschreiben was passieren soll wenn ein Schiff zerstoert wird
				 gold = gold + compareE.getBounty();
				 if (compareE.type == 3){ //boot schiesst zurück
					 //if (Math.random() < 0.10){
						 //killingTower(compareE,i);
						 
					 }
						 //Range abfrage remove tower fertig.
					 //}
			 }
			 if(compareE.getX()>(WIDTH+50)){					//Abfrage, ob Gegner am Ende angekommen sind
				 
				 enemies.remove(i);								//Gegner aus Liste entfernen;
				 lifes--;										//Leben - 1
				 
			
			 }
		 }
	 }
	 
	public static void killingTower (Enemy compareE, int k){
		double dx;
		double dy;
	
		Tower compareT;
	
		for (int i =0; i < towers.size(); i++){
			compareT = towers.get(i);
			dx = Math.abs(compareT.getX()-compareE.getX());
			dy = Math.abs(compareT.getY()-compareE.getY());
			if(Math.sqrt(dx*dx+dy*dy)<= 300){
				balls.add(new CanonBall(i, k, 0.1, compareE.getX(), compareE.getY(), compareT.getX(), compareT.getY()));
			}
		}
	}

	 
	 /*
	  * 	Tower Typen:
	  * 	1 = Kanone
	  * 	2 = RumKanone
	  * 
	  */
	 
	 public static boolean checkBuildable(int xPar, int yPar, int towerTypePar){		//checkt ob man an der uebergebenen Position bauen kann
		 
		 for(int i = 0; i < path.length; i++){
			 if(Math.abs(path[i].getX()-xPar) <path[i].getSize() && Math.abs(path[i].getY()-yPar) <path[i].getSize()){
			    message = "Verbotene Turm-Position! Der Turm kann nicht auf dem Weg der Feinde gebaut werden!";
				 return false;
			 }
		 }
		 
		 Tower compareT;
		 for(int i = 0; i< towers.size(); i++){
			 compareT = (Tower)towers.get(i);
		
			 if(towerTypePar == 1){		//Normale Kanone
				 if(Math.abs(compareT.getX()-xPar)<compareT.getSize() && Math.abs(compareT.getY()-yPar)<compareT.getSize()){
				    message = "Verbotene Turm-Position! Der Turm ist zu nah an einem anderen Turm!";
					 return false;
				 }
			 }
			 
			 if(towerTypePar == 2){		//RumKanone
				 if(Math.abs(compareT.getX()-xPar)<compareT.getSize()+20 && Math.abs(compareT.getY()-yPar)<compareT.getSize()){
				    message = "Verbotene Turm-Position! Der Turm ist zu nah an einem anderen Turm!";
					 return false;
				 }
			 }
			 
		 }	 
		
		 if(StdDraw.mouseX()>=(WIDTH-300) && StdDraw.mouseY()>= HEIGHT-100){
			 return false;
		 }
		 message = "";
		 return true;
	 }
	 
	 
	 public static void buildKanone(int xPar, int yPar){		//Baue an X,Y einen KanonenTurm
		 
		 Tower canon = new Kanone(xPar, yPar);
		 
		 if (gold - canon.getCost() >= 0){						//Abfrage, ob noch genug Gold vorhanden ist, um Tower zu setzen.
		    message = "";
		    boolean isSet = false;									//wenn in der For Schleife kein Turm gesetzt wird, wird er falls diese Variable false ist gesrtzt
			 
				 if(checkBuildable(xPar, yPar, 1)==true){
					 
					 Tower compareT;
					 for(int i = 0; i<towers.size(); i++){
							compareT = towers.get(i);
								if(compareT.getY() < yPar && isSet == false) {
									towers.add(i, canon);		//add Tower der im Vordergrund steht vor Hinteren Towers
									isSet = true;
								}
					}//for
					 if(isSet==false)towers.add(canon);
					 gold = gold - canon.getCost();
				 }	 
		 } else {
		    message = "Zu wenig Gold zum Bauen des Turms!";
		 }
	 }
	 
	 public static void buildRum(int xPar, int yPar){
		 Tower rum = new Rumkanone(xPar,yPar);
		 
		 if (gold >= rum.getCost()){						//Abfrage, ob noch genug Gold vorhanden ist, um Tower zu setzen.

		    message = "";
		    boolean isSet = false;									//wenn in der For Schleife kein Turm gesetzt wird, wird er falls diese Variable false ist gesrtzt
			 
				 if(checkBuildable(xPar, yPar, 2)==true){			//Typ 2 da RumKanone
					 
					 Tower compareT;
					 for(int i = 0; i<towers.size(); i++){
							compareT = towers.get(i);
								if(compareT.getY() < yPar && isSet == false) {
									towers.add(i, rum);		//add Tower der im Vordergrund steht vor Hinteren Towers
									isSet = true;
								}
					}//for
					 if(isSet==false)towers.add(rum);
					 gold = gold - rum.getCost();
				 }	 
		 } else {
		    message = "Zu wenig Gold zum Bauen des Turms!";
		 }
		 		 
	 }
	 
	 
	 public static void buildMill(int xPar, int yPar){		//Baue an X,Y einen KanonenTurm
		 
		 Tower canon = new Windmill(xPar, yPar);
		 
		 if (gold - canon.getCost() >= 0){						//Abfrage, ob noch genug Gold vorhanden ist, um Tower zu setzen.
		    message = "";
		    boolean isSet = false;									//wenn in der For Schleife kein Turm gesetzt wird, wird er falls diese Variable false ist gesrtzt
			 
				 if(checkBuildable(xPar, yPar, 1)==true){
					 
					 Tower compareT;
					 for(int i = 0; i<towers.size(); i++){
							compareT = towers.get(i);
								if(compareT.getY() < yPar && isSet == false) {
									towers.add(i, canon);		//add Tower der im Vordergrund steht vor Hinteren Towers
									isSet = true;
								}
					}//for
					 if(isSet==false)towers.add(canon);
					 gold = gold - canon.getCost();
				 }	 
		 } else {
		    message = "Zu wenig Gold zum Bauen des Turms!";
		 }
	 }
	 
	 
	 
	 public static void drawTowers(){							//Zeichnet die T�rme die in der Towers Liste enthalten sind
		 Tower compareT;
		 if(!towers.isEmpty()){
			 		 
			 for(int i = 0; i < towers.size(); i++){
				 compareT = towers.get(i);
				 if(compareT.getTyp()==1){
					 StdDraw.picture(compareT.getX() + 15, compareT.getY()+30, "TurmSchatten2.png");
					 StdDraw.picture(compareT.getX(), compareT.getY()+30, "turm1.png");
				 }
				 
				 if(compareT.getTyp()==2){
						StdDraw.picture(compareT.getX()+15,compareT.getY()+5, "RumKanoneSchatten.png");
						StdDraw.picture(compareT.getX(),compareT.getY()+5, "RumKanone.png");
						if(compareT.getApeThrow()){
							
							StdDraw.picture(compareT.getX()+60, compareT.getY()+40, "RapeSchatten2.png");		//AFFE schmeisset Fass
							StdDraw.picture(compareT.getX()+20, compareT.getY()+35, "RapeApe2.png");		//AFFE schmeisset Fass
						}
						else{
							
							StdDraw.picture(compareT.getX()+57, compareT.getY()+38, "RapeSchatten1.png");
							StdDraw.picture(compareT.getX()+20, compareT.getY()+35, "RapeApe1.png");
						}
				}
				 
				
				 if(compareT.getTyp()==3){
						StdDraw.picture(compareT.getX(),compareT.getY(), "Windmuehle2.png");
						

						StdDraw.picture(compareT.getX()-5,compareT.getY()+5, "Windmuehle1.png", compareT.getMillTurn());
						
						if(compareT.millTurn >360) compareT.setTurn(1);
						
						int turn = compareT.getMillTurn()+1;
						compareT.setTurn(turn);
				 }
				 
			}//for
			 
		}
				 

			 
	}
	 
	 public static void shoot(){
		 
		 Enemy compareE;
		 Tower compareT;
		 double dx = 0;
		 double dy = 0;
		 //int hp = 0;
		 int waitedPar = 0;
		 
		 Enemy slowEnemy = new Schiff(1,1);
		 boolean isEnemy2 = false;
		 boolean isInRange = false;
		 int reminderEnemy = 0;
		 boolean alreadySlowed = false; 			//Falls alle Slow sind, wird in eine Schleife gesprungen um den ersten in Reichweite erneut zu verlangsamen
		 
		 for(int i = 0; i < towers.size(); i++){
		    
			 compareT = towers.get(i);
			 
			 if(compareT.getTyp()==2 && compareT.getWaited()>= (int)(compareT.coolDown/2)) compareT.setApeThrow(false); 
			 
			 if(compareT.getWaited() >= compareT.getCoolDown()){	
				 
				 
				 
				 for(int k = 0; k< enemies.size(); k++){
				    
					 compareE = enemies.get(k);
					 
					 // range check
					 dx = Math.abs(compareE.getX()-compareT.getX());
					 dy = Math.abs(compareE.getY()-compareT.getY());
					 if(Math.sqrt(dx*dx+dy*dy)<=compareT.getRange()){
						 
						 isInRange = true;
						 
						// play sound
				    	Sound.play("sounds/canonball_shot.wav");
						
						 if(compareT.getTyp()== 1){
						    // KanonenKugel wird der Liste Balls hinzugef�gt
							 balls.add(new CanonBall(i, k, 0.1, compareT.getX(), compareT.getY(), compareE.getX(), compareE.getY()));
							
							// wait timer resetten
							 compareT.setWaited(0);
							 break;
						 }
						 
						 
						 if(compareT.getTyp()==2){
						
							 compareT.setApeThrow(true);
							 
							 slowEnemy = compareE;
							 isEnemy2 = true;
							
							 reminderEnemy = k;
							 if(compareE.getEffected() !=1){
								 
								 // add ball to queue
								 balls.add(new CanonBall(i, k, 0.1, compareT.getX(), compareT.getY(), compareE.getX(), compareE.getY()));
 
								 
								// wait timer resetten
								 compareT.setWaited(0);
								 alreadySlowed = true;
								 break;
								 
							 	}
							 
						 	}
						
					}
			
					 
				 }
				 
				//Fall abfangen falls alle Gegner in Reichweite Slow sind, der Turm aber dann trotzdem den Slow effeckt am erstbesten vergr��ert
				if(alreadySlowed == false && isInRange && isEnemy2){
					 balls.add(new CanonBall(i, reminderEnemy, 0.1, compareT.getX(), compareT.getY(), slowEnemy.getX(), slowEnemy.getY()));
					// wait timer resetten
					 compareT.setWaited(0);
					 alreadySlowed = true;
					 break;
							
				}
			 }
			 
			 waitedPar = compareT.getWaited();
			 compareT.setWaited(waitedPar+1);
			 towers.remove(i);
			 towers.add(i, compareT);
		}	 
	 }
	 
	 
	 
	 
	 public static void mapOne(){
		 
//////////////////Draw Route	/////////////////////////////////////////////////
			/*
			 * Image 1 Horizontaler Weg
			 * Image 2 Vertikaler Weg
			 * Image 3 Kurve Oeffnung von links nach oben
			 * Image 4 Kurve Oeffnung von oben nach rechts
			 * Image 5 Kurve Oeffnung von rechts nach unten
			 * Image 6 Kurve Oeffnung von links nach unten
			 * 
			 */
			for(int i = 0; i< 5; i++){
				
			   // StartY +5 damit die Schiffe relativ mittig gezeichnet werden 
				path[i] = new Path(100*i+150, startY+5, 1,1);	
			
			} 
			
				path[4] = new Path(498,startY+5,2,6);		//Kreuzungen sollten sich ueberlappen da sonst Schiffe und Flosse zu frueh abbiegen und ueber Land fahren
			
			for(int i = 5; i< 8; i++){
				
				   // StartY +5 damit die Schiffe relativ mittig gezeichnet werden 
					path[i] = new Path(500, startY+5-(i-4)*100, 2,2);	
				
				} 
			
			path[8] = new Path(500,startY+5-(3*100+60),1,4);
			path[9] = new Path(500+100,startY+5-(3*100+60),1,1);
			path[10] = new Path(500+200,startY+5-(3*100+60),1,1);
			path[11] = new Path(500+250,startY+5-(3*100+60),0,3);
			path[12] = new Path(500+250,startY+5-(3*100+60)+100,0,2);
			path[13] = new Path(500+250,startY+5-(3*100+60)+150,1,5);
			
			
			for(int i = 14; i< 20; i++){
				
				   // StartY +5 damit die Schiffe relativ mittig gezeichnet werden 
					path[i] = new Path(500+250+(100*(i-13)),startY+5-(4*100)+190,1,1);	
				
				} 
			 
	 }
	 
	 
	 public static void drawInterface(){
		 
		 StdDraw.picture(WIDTH-90,HEIGHT-30, "RolleHorizontal.png");
		 StdDraw.picture(canonButtonX, canonButtonY, "TurmButton1.png");
		 StdDraw.picture (rumButtonX, canonButtonY, "TurmButtonRum.png");
		 StdDraw.picture(millButtonX, canonButtonY, "TurmButton3.png");
	 }
	 

	 public static void watchMouse(){
		 
		 if(StdDraw.mousePressed()){
		   	if(Math.abs(StdDraw.mouseX()-canonButtonX)<=40 && Math.abs(StdDraw.mouseY()-canonButtonY)<=40 ){
				 buildCanon = true;
				 buildRum = false;
				 buildMill = false;
			 }
		   	
		   	if(Math.abs(StdDraw.mouseX()-rumButtonX)<=40 && Math.abs(StdDraw.mouseY()-canonButtonY)<=40 ){
				 buildRum = true;
				 buildCanon = false;
				 buildMill = false;
				
			 }
		   	
		   	if(Math.abs(StdDraw.mouseX()-millButtonX)<=40 && Math.abs(StdDraw.mouseY()-canonButtonY)<=40 ){
				 buildMill = true;
				 buildCanon = false;
				 buildRum = false;
				
			 }
		 }
	 }
	 
	 public static void stillslowed (){ //Nach 1,5 Sekunden hört der slow auf
		 Enemy ship;
		 for (int i = 0; i < enemies.size(); i++){
			 ship = enemies.get(i);
			 if (ship.effected == 1 && ship.effected != 2){
				 if ((ship.timer+1500) >= System.currentTimeMillis()){
					 ship.effected = 0;
					 if (ship.type == 1) ship.speed = 1;
			 		 if (ship.type == 2) ship.speed = 2;
				 }
			 }
		 }
	 }
	 
	 public static void stillstunned (){
		 Enemy ship;
		 	for (int i = 0; i < enemies.size(); i++){
		 		ship = enemies.get(i);
		 		if (ship.effected == 2)
		 			
		 			if ((ship.timer+500) >= System.currentTimeMillis()){
		 				if (ship.type == 1) ship.speed = 1;
		 				if (ship.type == 2) ship.speed = 2;
		 			}
		 			/*switch (ship.type){
		 			case 1: ship.speed = 1;
		 			case 2: ship.speed = 2;
		 			}*/
		 	}
	 }
	 
		 
	 
	 public static void HandleDot(Enemy e){					// HandleDot Methode wird in DrawShips durchgelafen um einen weiteren schleifen Durchlauf von
		   													// den Schiffen zu vermeiden
		   if(e.getDot()){
		    
		    if(e.getDotTimer()%1000 == 0 ){
		     
		     int hp = e.getHP();
		     
		     if(e.getDotLevel() == 1) hp = hp-1;  // Hardcoded Values must be replaced !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		     if(e.getDotLevel() == 1) hp = hp-2;
		     if(e.getDotLevel() == 1) hp = hp-3;
		     e.setHP(hp);
		     
		    }
		    
		    if(e.getDotTimer() > 3000){
		     
		     e.setDotTimer(0);
		     e.setDot(false);
		    }
		    long dot = e.getDotTimer();
		    e.setDotTimer(dot);
		   }
		 }
	 
	 
	 public static void mouseSetCanon(){
		 
		 if(buildCanon == true) {
				if(checkBuildable((int)StdDraw.mouseX(),(int)StdDraw.mouseY(),1) && gold >= 200 && ( StdDraw.mouseX()<=(WIDTH-300) || StdDraw.mouseY()<= HEIGHT-100) ){
					
					StdDraw.picture((int)StdDraw.mouseX(),(int)StdDraw.mouseY()+30, "turm1.png");
					StdDraw.setPenColor(StdDraw.RED);
					StdDraw.circle((int)StdDraw.mouseX(),(int)StdDraw.mouseY(), canonRadius);
					StdDraw.setPenColor(StdDraw.BLACK);			
					
				 }
				
				 if(StdDraw.mousePressed() && ( StdDraw.mouseX()<=(WIDTH-300) || StdDraw.mouseY()<= HEIGHT-100) ){
					 buildKanone((int)StdDraw.mouseX(),(int)StdDraw.mouseY());
					 buildCanon = false;
				 }
				 showMessage();
			 }
		 
		 
	 }
	 
	 
	 public static void mouseSetRum(){
		 
		 if(buildRum == true) {
				if(checkBuildable((int)StdDraw.mouseX(),(int)StdDraw.mouseY(),2) && gold >= 180  && ( StdDraw.mouseX()<=(WIDTH-300) || StdDraw.mouseY()<= HEIGHT-100)){
					
					StdDraw.picture((int)StdDraw.mouseX(),(int)StdDraw.mouseY()+5, "RumKanone.png");
					StdDraw.picture(StdDraw.mouseX()+20, StdDraw.mouseY()+35, "RapeApe1.png");
					StdDraw.setPenColor(StdDraw.BLUE);
					StdDraw.circle((int)StdDraw.mouseX(),(int)StdDraw.mouseY(), rumCanonRadius);
					StdDraw.setPenColor(StdDraw.BLACK);			
					
				 }
				
				 if(StdDraw.mousePressed()  && ( StdDraw.mouseX()<=(WIDTH-300) || StdDraw.mouseY()<= HEIGHT-100)  ){
					 buildRum((int)StdDraw.mouseX(),(int)StdDraw.mouseY());
					 buildRum = false;
					 
				 }
				 showMessage();
			 }
		 
		 
	 }
	 
	 public static void mouseSetRMill(){
		 
		 if(buildMill == true) {
				if(checkBuildable((int)StdDraw.mouseX(),(int)StdDraw.mouseY(),2) && gold >= 230  && ( StdDraw.mouseX()<=(WIDTH-300) || StdDraw.mouseY()<= HEIGHT-100)){
					
					StdDraw.picture((int)StdDraw.mouseX(),(int)StdDraw.mouseY()+10, "Windmuehle2.png");
					StdDraw.picture(StdDraw.mouseX()-5, StdDraw.mouseY()+15, "Windmuehle1.png");
					StdDraw.setPenColor(StdDraw.YELLOW);
					StdDraw.circle((int)StdDraw.mouseX(),(int)StdDraw.mouseY(), millRadius);
					StdDraw.setPenColor(StdDraw.BLACK);			
					
				 }
				
				 if(StdDraw.mousePressed()  && ( StdDraw.mouseX()<=(WIDTH-300) || StdDraw.mouseY()<= HEIGHT-100)  ){
					 buildMill((int)StdDraw.mouseX(),(int)StdDraw.mouseY()+10);
					 buildMill = false;
					 
				 }
				 showMessage();
			 }
		 
		 
	 }
	 
	 
	 public static void keyCheck() {
	       
	       char key = 0;
	       
	       if(StdDraw.hasNextKeyTyped()){
	            key = StdDraw.nextKeyTyped();
	       }
	       
	       
	       // mute sounds
	       if(key == 'm'){
	          
	          if(sounds == true){
	        	  sounds = false;
	          } else {
	        	  sounds = true;
	          }
	          
	          
	       }
	       //pause
	       if(key == 'p'){	
	    	   if(pause == true){
	    		   	pause = false;
	    	   }
	    	   else{
	    		   	pause = true;
	    	   }
	       }
	       //Start
	       if(key=='n'){
	    	   start = true;
	    	   
	       }
	       
	       // developer cheats
	       if(key == 'j'){
	          lifes = 0;
	       }
	       // add enemy schiff
	       if(key == 's'){ //
	          enemies.add(new Schiff(-100,startY));
	       }
	       // add enemy floss
	       if(key == 'f'){ 
	          enemies.add(new Floss(-100,startY+30)); 
	       }
	       // cash
	       if(key == 'c'){ 
	          gold += 1000;
	       }

	       // bind 1, 2 ... to towers
	       if(key == '1'){
	             buildCanon = true;
	             buildRum = false;
	             buildMill = false;
	       }
	      
	       if(key == '2'){
	          buildRum = true;
	          buildCanon = false;
	          buildMill = false;
	       }
	       
	       if(key == '3'){
	    	  buildRum = false;
		      buildCanon = false;
		      buildMill = true;   
	    	   
	       }
	       
	       /*
	       if(playername.length() < 3 && key != 0){
	          
	          String key2 = "";
	          key2 = String.valueOf(key);
	       
	          playername = playername.concat(key2);
	       
	         StdDraw.text(WIDTH/2, HEIGHT/2, playername);
	         System.out.println(playername);
	       }
	       */
	       
	    }
	 
	 public static void gameover(){
	    
	    StdDraw.picture(WIDTH/2, HEIGHT/2+100, "game_over.png");
	    StdDraw.picture(WIDTH/2, HEIGHT/2, "game_over_your_name.png");
	    StdDraw.show(10);
       
       while(playername.length() < 5){
          
          char key = 0;
          if(StdDraw.hasNextKeyTyped()){
               key = StdDraw.nextKeyTyped();
          }
          
          StdDraw.text(WIDTH/2+5+playername.length()*40, HEIGHT/2, String.valueOf(key).toUpperCase());
          StdDraw.show(10);
          
          if(key != 0){
             
             String key2 = "";
             key2 = String.valueOf(key);
          
             if(key2 != "" || key2 != ";"){
                playername = playername.concat(key2);
             }
             
             playername = playername.toUpperCase();
             
             //System.out.println(playername);
             
             key = 0;
             try { Thread.sleep(250); } catch (Exception e) { }
          }
          
       }
       
       lifes = -100;

	    
	 }
	 
	 
	 public static void sortEnemy(){
		 
		 Enemy compareE;
		 Enemy enemy;
		 
		 for(int i = 0; i < enemies.size();i++){
			 
			 for(int k = i; k < enemies.size(); k++){
				 
				 enemy = enemies.get(k);
				 if(enemies.get(i).getX() < enemy.getX()){
					 enemies.add(i, enemy);
					 enemies.remove(k);
				 }
			 }
			 
		 }
	 }

	 
<<<<<<< .mine
}//class

=======
	 
}
>>>>>>> .r140
